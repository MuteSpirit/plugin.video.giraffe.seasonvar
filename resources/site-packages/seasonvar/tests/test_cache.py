import os.path
import pytest
from pytest_check import check
from seasonvar.cache import Cache
import re


def cache_dir():
    return os.path.join(os.path.dirname(__file__), 'assets', 'cache')


def cache_path(path):
    return os.path.join(cache_dir(), path)


@pytest.mark.parametrize('asset, expected_dates', [
    ('single', ['03.04.2017']),
    ('multiple', ['03.04.2017', '02.04.2017'])
])
def test_cache_dayblocks(asset, expected_dates):
    cache = Cache(cache_path(asset))
    dates = [d for d, items in cache._main_page_dayblocks()]
    assert dates == expected_dates

@pytest.mark.parametrize('asset, expected_items', [
    ('single', [
        {
            'changes': '(6 сезон) 11 серия (Amedia)',
            'name': 'Родина',
            'url': '/serial-14903-Rodina-00006-sezon.html'
        },
        {
            'changes': '10 серия (Котова)',
            'name': 'До самой смерти',
            'url': '/serial-14996-Do_samoj_smerti.html'
        },
        {
            'changes': '(3 сезон) 10 серия (Amedia)',
            'name': 'Игроки / Футболисты',
            'url': '/serial-15971-Igroki--03-sezon.html'
        }]),
])
def test_cache_dayblock_items(asset, expected_items):
    cache = Cache(cache_path(asset))
    dayblocks = [items for date, items in cache._main_page_dayblocks()]
    assert dayblocks[0] == expected_items


@pytest.mark.parametrize('asset, season_url, expected_seasons', [
        ('single-2022', '/serial-33965-Molodoj_SHeldon-6-season.html', 6),
    ])
def test_cache_seasons(asset, season_url, expected_seasons):
    cache = Cache(cache_path(asset))
    seasons = cache.seasons(season_url)
    check.equal(expected_seasons, len(seasons))


@pytest.mark.parametrize('asset, season_url, expected_playlists', [
        ('single-2022', '/serial-33965-Molodoj_SHeldon-6-season.html', 3),
    ])
def test_player_params(asset, season_url, expected_playlists):
    cache = Cache(cache_path(asset))
    playlists = cache.playlists(season_url)
    check.is_not_none(playlists)
    check.equal(expected_playlists, len(playlists))
    check.equal(expected_playlists, len([pl['tr'] for pl in playlists]))


@pytest.mark.parametrize('asset, playlist_url, expected_episodes', [
        ('single-2022', '/playls2/71c6665ccfab9ade4398cb310eefd491/trans/33965/plist.txt?time=1671477779', 8),
    ])
def test_cache_episodes(asset, playlist_url, expected_episodes):
    cache = Cache(cache_path(asset))
    episodes = cache.episodes(playlist_url)
    check.is_not_none(episodes)
    check.equal(expected_episodes, len(episodes))
    for ep in episodes:
        check.is_in('name', ep)
        check.not_equal('name', '')
        check.is_in('url', ep)
        check.not_equal('url', '')
        check.is_not_none(re.match(r'.*\.(m3u8|mp4)$', ep['url']))

