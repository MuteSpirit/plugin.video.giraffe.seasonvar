# coding: utf-8

import os.path
import json
from glob import glob

# no caching for online search

def day_items(datestr):
    '''Collect all dayblock items(i.e episode changes) for a given date
    and yields dict {'url': ..., 'name': ..., 'changes': ...} for each
    episode for that date.

    datestr should be in format 'dd.mm.yyyy'
    '''
    yield {}


class Cache:
    def __init__(self, cache_dir_path):
        self._cdpath = cache_dir_path
        self._dayblocks_glob = os.path.join(self._cdpath, '*.json')
        self._serials_dir_path = os.path.join(cache_dir_path, 'serials')
        self._episodes_dir_path = os.path.join(cache_dir_path, 'episodes')

    def _main_page_dayblocks(self):
        for f in glob(self._dayblocks_glob):
            fname, _ = os.path.splitext(os.path.basename(f))
            print(fname, f)
            with open(f, "rb") as fo:
                yield fname, json.load(fo)

    def seasons(self, season_url):
        scache = self._get_season_cache(season_url)
        if not scache:
            return []
        return scache['seasons']

    def playlists(self, season_url):
        scache = self._get_season_cache(season_url)
        if not scache:
            return []
        return scache['playlists']

    def episodes(self, playlist_url):
        pl_id, trans = playlist_url.split('/')[2:4]
        fpath = os.path.join(self._episodes_dir_path, f'{pl_id}-{trans}.json')
        if not fpath:
            return []
        with open(fpath, "rb") as fo:
            return json.load(fo)

    def _get_season_cache(self, season_url):
        fpath = self._get_season_cache_path(season_url)
        if not fpath:
            return None
        with open(fpath, "rb") as fo:
            return json.load(fo)

    def _get_season_cache_path(self, season_url):
        bname = os.path.basename(season_url)
        if not bname:
            return None
        fname, _ = os.path.splitext(bname)
        if not fname:
            return None
        return os.path.join(self._serials_dir_path, f'{fname}.json')

